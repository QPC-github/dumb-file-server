#!/usr/bin/env python3

import cgi
import logging
import os
import tempfile

# Enable tracebacks during development
# import cgitb
# cgitb.enable()

DATADIR = "."
TMPDIR = ".tmp"

def error_status(code_msg):
    print("Status: %s" % code_msg)
    print()
    print(code_msg)

def error_status_400_bad_request():
    error_status("400 Bad Request")

def error_status_500_internal_server_error():
    error_status("500 Internal Server Error")

def valid_name_char(c):
    # Allow only ASCII printable characters except space and slashes.
    return (ord(c) > 0x20 and   # SPACE
            ord(c) < 0x7F and   # DEL
            c != '/' and c != '\\')

def valid_filename(filename):
    if filename is None or filename == "":
        return False
    # Disallow .hidden or -foo files
    if filename.startswith(".") or filename.startswith("-"):
        return False
    for c in filename:
        if not valid_name_char(c):
            return False
    return True

def handle_POST():
    form = cgi.FieldStorage()

    # The request must contain at least one 'file' field.
    if not "file" in form:
        error_status_400_bad_request()
        return

    # The request may contain one or more 'file' fields.
    filefields = form["file"]
    if isinstance(filefields, list):
        pass
    else:
        filefields = [filefields]

    # Reject incomplete requests.
    # Reject missing or invalid file names.
    # (We could but don't reject duplicate file names.)
    for filefield in filefields:
        if filefield.done == -1 or not valid_filename(filefield.filename):
            error_status_400_bad_request()
            return

    # Write the request body to temporary files.
    tmp_final_fns = []
    try:
        for filefield in filefields:
            final_fn = os.path.join(DATADIR, filefield.filename)
            with tempfile.NamedTemporaryFile(dir=TMPDIR, delete=False) as tmp_fp:
                tmp_final_fns.append( (tmp_fp.name, final_fn) )
                tmp_fp.write(filefield.file.read())
    except:
        cleanup_tmp_files(tmp_final_fns)
        raise   # reraise exception

    # Move temporary files into final locations.
    for (tmp_fn, final_fn) in tmp_final_fns:
        os.replace(tmp_fn, final_fn)

    print("Content-Type: text/plain")
    print()
    for filefield in filefields:
        print("Wrote %s" % filefield.filename)

def cleanup_tmp_files(tmp_final_fns):
    for (tmp_fn, _) in tmp_final_fns:
        try:
            os.remove(tmp_fn)
        except:
            pass

if __name__ == "__main__":
    try:
        handle_POST()
    except:
        logging.exception('')
        error_status_500_internal_server_error()
